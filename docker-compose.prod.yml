# Arquivo: docker-compose.prod.yml (na raiz do projeto)

version: '3.8'

services:
  # 1. Serviço da Aplicação Django (App)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    # Carregar variáveis de ambiente do .env
    env_file:
      - ./.env
    # Mapear variáveis de produção no ambiente do contêiner
    environment:
      # Definir chaves de produção (garante que DEBUG=False)
      DJANGO_DEBUG: 'False'
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    # Expor a porta internamente para que o Caddy possa se conectar
    expose:
      - "8000"
    restart: always
    # Volumes para persistência e acesso do Caddy
    volumes:
      # CORRIGIDO: Mapeia o volume nomeado (diretório) para o novo diretório 'data'
      - django_db:/usr/src/app/data 
      
      # Persistência de arquivos estáticos
      - django_static:/usr/src/app/staticfiles_prod 
      # Persistência de arquivos de mídia (uploads)
      - django_media:/usr/src/app/media_prod 

  # 2. Serviço de Proxy Reverso Caddy (HTTPS/Reverse Proxy)
  caddy:
    image: caddy:2-alpine
    restart: always
    ports:
      # Expor as portas HTTP (80) e HTTPS (443) para o mundo
      - "80:80"
      - "443:443"
    volumes:
      # Mapear o Caddyfile de configuração
      - ./Caddyfile:/etc/caddy/Caddyfile
      # Mapear os volumes estáticos e de mídia para que o Caddy possa servir
      - django_static:/usr/src/app/staticfiles_prod
      - django_media:/usr/src/app/media_prod
      # Volume para persistência dos certificados SSL (muito importante!)
      - caddy_data:/data
    depends_on:
      - app

# Volumes para persistência de dados
volumes:
  django_db:   # Volume nomeado para o banco de dados (agora é um diretório)
  django_static: # Volume para os arquivos estáticos
  django_media:  # Volume para os arquivos de mídia (uploads)
  caddy_data:  # Volume para os certificados do Caddy